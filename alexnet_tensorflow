
import tensorflow as tf
import numpy as np
#输入数据mnist
from tensorflow.examples.tutorials.mnist import input_data
mnist=input_data.read_data_sets('tmp/data/',one_hot=True)
#定义网络的超参数
learning_rate=0.001
training_iters=200000
batch_size=128
display_step=10
#定义网络的参数
n_input=784
n_classes=10
dropout=0.75
#输入占位符
x=tf.placeholder(tf.float32,[None,n_input])
y=tf.placeholder(tf.float32,[None,n_classes])
keep_prob=tf.placeholder(tf.float32)

#构建神经网络
#定义卷积参数
def conv2d(name,x,w,b,strides=1):
    x=tf.nn.conv2d(x,w,strides=[1,strides,strides,1],padding='SAME',name=name)
    x=tf.nn.bias_add(x,b)
    return tf.nn.relu(x,name=name)
#定义池化层参数
def maxpool2d(name,x,k=2):
    return tf.nn.max_pool(x,ksize=[1,k,k,1],strides=[1,k,k,1],padding='SAME',name=name)
#规范化操作
def norm(name,l_input,lsize=4):
    return tf.nn.lrn(l_input,lsize,bias=1.0,alpha=0.001/9.0,beta=0.75,name=name)

#定义网络参数 
weights={
    'wc1': tf.Variable(tf.random_normal([11,11,1,96])),
    'wc2': tf.Variable(tf.random_normal([5,5,96,256])),
    'wc3': tf.Variable(tf.random_normal([3,3,256,384])),
    'wc4': tf.Variable(tf.random_normal([3,3,384,384])),
    'wc5': tf.Variable(tf.random_normal([3,3,384,256])),
    'wd1': tf.Variable(tf.random_normal([4*4*256,4096])),
    'wd2': tf.Variable(tf.random_normal([4096,4096])),
    'out': tf.Variable(tf.random_normal([4096,10])),
}
biases={
    'bc1':tf.Variable(tf.random_normal([96])),
    'bc2':tf.Variable(tf.random_normal([256])),
    'bc3':tf.Variable(tf.random_normal([384])),
    'bc4':tf.Variable(tf.random_normal([384])),
    'bc5':tf.Variable(tf.random_normal([256])),
    'bd1':tf.Variable(tf.random_normal([4096])),
    'bd2':tf.Variable(tf.random_normal([4096])),
    'out':tf.Variable(tf.random_normal([n_classes])),
}

#定义alexnet网络
def alex_net(x,weights,biases,dropout):
    #reshape input piture
    x=tf.reshape(x,shape=[-1,28,28,1])
    #第一层卷积
    conv1=conv2d('conv1',x,weights['wc1'],biases['bc1'])#卷积
    pool1=maxpool2d('pool1',conv1,k=2)#下采样
    norm1=norm('norm1',pool1,lsize=4)#规范化
    pop1=np.ndim(norm1)
    print(pop1)
    #第二层卷积
    conv2=conv2d('conv2',norm1,weights['wc2'],biases['bc2'])#卷积
    pool2=maxpool2d('pool2',conv2,k=2)#下采样
    norm2=norm('norm2',pool2,lsize=4)#规范化
    pop2=np.ndim(norm2)
    print(pop2)
    #第三层卷积
    conv3=conv2d('conv3',norm2,weights['wc3'],biases['bc3'])#卷积
    pool3=maxpool2d('pool3',conv3,k=2)#下采样
    norm3=norm('norm3',pool3,lsize=4)#规范化
    pop3=np.ndim(norm3)
    print(pop3)
    #第四层卷积
    conv4=conv2d('conv4',norm3,weights['wc4'],biases['bc4'])#卷积
    pop4=np.ndim(conv4)
    print(pop4)
    #pool4=maxpool2d('pool4',conv4,k=2)#下采样
    #norm4=norm('norm4',pool4,lsize=4)#规范化
    #第五层卷积
    conv5=conv2d('conv5',conv4,weights['wc5'],biases['bc5'])#卷积
    pool5=maxpool2d('pool5',conv5,k=2)#下采样
    norm5=norm('norma5',pool5,lsize=4)#规范化
    pop5=np.ndim(norm5)
    print(pop5)
    #全连接层1
    fc1=tf.reshape(norm5,[-1,weights['wd1'].get_shape().as_list()[0]])
    fc1=tf.add(tf.matmul(fc1,weights['wd1']),biases['bd1'])
    fc1=tf.nn.relu(fc1)
    fc1=tf.nn.dropout(fc1,dropout)#dropout
    pop6=np.ndim(fc1)
    print(pop6)
    #全连接层2
    fc2=tf.reshape(fc1,[-1,weights['wd2'].get_shape().as_list()[0]])
    fc2=tf.add(tf.matmul(fc2,weights['wd2']),biases['bd2'])
    fc2=tf.nn.relu(fc2)
    fc2=tf.nn.dropout(fc2,dropout),#dropout
    pop7=np.ndim(fc2)
    print(pop7)
    #输出层
    out=tf.add(tf.matmul(fc2,weights['out']),biases['out'])
    return out

#构建模型，定义损失函数和优化器，并构建评估函数
#构建模型
pred=alex_net(x,weights,biases,keep_prob)
#定义损失函数和优化器
cost=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(pred,y))
optimizer=tf.train.AdamOptimizer(learning_rate=learning_rate).minimizer(cost)
#评估函数
correct_pred=tf.equal(tf.argmax(pred,1),tf.argmax(y,1))
accuracy=tf.reduce_mean(tf.cast(correct_pred,tf.float32))

#训练模型和评估模型
#初始化变量
init=tf.global_variables_initializer()

with tf.Session() as sess:
    sess.run(init)
    step=1
    #开始训练，直到达到training_iters,即200000
    while step*batch_size<training_iters:
        batch_x,batch_y=mnist.next_batch(batch_size)
        sess.run(optimizer,feed_dict={x:batch_X,y:batch_y,keep_prob:dropout})
        if step%display_step==0:
            #计算损失值和准确度，输出
            loss,acc=sess.run([cost,accuracy],feed_dict={x:batch_x,y:batch_y,keep_prob:1.})
            print('iter'+str(step*batch_size)+',Minibath Loss= '+\
                    '{:.6f}'.format(loss)+', Training Accuracy='+'{.5f}'.format(acc))
        step+=1
    print('optimization finished!')
    #计算测试集的准确度
    print('testing acuracy:',sess.run(accuracy,feed_dict={x:mnist.test.images[:256],y:mnist.test.images[:256],keep_prob:1.}))








    
